"""
This type stub file was generated by pyright.
"""

from .layout import Div, Field, LayoutObject, TemplateNameMixin

class PrependedAppendedText(Field):
    template = ...
    def __init__(self, field, prepended_text=..., appended_text=..., input_size=..., *args, **kwargs) -> None:
        ...
    
    def render(self, form, form_style, context, template_pack=..., extra_context=..., **kwargs):
        ...
    


class AppendedText(PrependedAppendedText):
    def __init__(self, field, text, *args, **kwargs) -> None:
        ...
    


class PrependedText(PrependedAppendedText):
    def __init__(self, field, text, *args, **kwargs) -> None:
        ...
    


class FormActions(LayoutObject):
    """
    Bootstrap layout object. It wraps fields in a <div class="form-actions">

    Example::

        FormActions(
            HTML(<span style="display: hidden;">Information Saved</span>),
            Submit('Save', 'Save', css_class='btn-primary')
        )
    """
    template = ...
    def __init__(self, *fields, **kwargs) -> None:
        ...
    
    def render(self, form, form_style, context, template_pack=..., **kwargs): # -> SafeText:
        ...
    
    def flat_attrs(self): # -> SafeText:
        ...
    


class InlineCheckboxes(Field):
    """
    Layout object for rendering checkboxes inline::

        InlineCheckboxes('field_name')
    """
    template = ...
    def render(self, form, form_style, context, template_pack=..., **kwargs): # -> LiteralString:
        ...
    


class InlineRadios(Field):
    """
    Layout object for rendering radiobuttons inline::

        InlineRadios('field_name')
    """
    template = ...
    def render(self, form, form_style, context, template_pack=..., **kwargs): # -> LiteralString:
        ...
    


class FieldWithButtons(Div):
    """
    A layout object for rendering a single field with any number of buttons.

    Args:
        fields : str or LayoutObject
            The first positional argument is the field. This can be either the
            name of the field as a string or an instance of `Field`. Following
            arguments will be rendered as buttons.
        input_size : str
            Additional CSS class to change the size of the input. e.g.
            "input-group-sm".
        kwargs
            Additional kwargs to be passed to the parent `Div` Layout Object.

    Example::

        FieldWithButtons(
            Field("password1", css_class="span4"),
            StrictButton("Go!", css_id="go-button"),
            input_size="input-group-sm",
        )
    """
    template = ...
    field_template = ...
    def __init__(self, *fields, input_size=..., **kwargs) -> None:
        ...
    
    def render(self, form, form_style, context, template_pack=..., extra_context=..., **kwargs):
        ...
    


class StrictButton(TemplateNameMixin):
    """
    Layout object for rendering an HTML button::

        Button("button content", css_class="extra")
    """
    template = ...
    field_classes = ...
    def __init__(self, content, **kwargs) -> None:
        ...
    
    def render(self, form, form_style, context, template_pack=..., **kwargs): # -> SafeText:
        ...
    


class Container(Div):
    """
    Base class used for `Tab` and `AccordionGroup`, represents a basic container concept
    """
    css_class = ...
    def __init__(self, name, *fields, **kwargs) -> None:
        ...
    
    def __contains__(self, field_name): # -> bool:
        """
        check if field_name is contained within tab.
        """
        ...
    
    def render(self, form, form_style, context, template_pack=..., **kwargs): # -> SafeText:
        ...
    


class ContainerHolder(Div):
    """
    Base class used for `TabHolder` and `Accordion`, groups containers
    """
    def first_container_with_errors(self, errors): # -> None:
        """
        Returns the first container with errors, otherwise returns None.
        """
        ...
    
    def open_target_group_for_form(self, form):
        """
        Makes sure that the first group that should be open is open.
        This is either the first group with errors or the first group
        in the container, unless that first group was originally set to
        active=False.
        """
        ...
    


class Tab(Container):
    """
    Tab object. It wraps fields in a div whose default class is "tab-pane" and
    takes a name as first argument. Example::

        Tab('tab_name', 'form_field_1', 'form_field_2', 'form_field_3')
    """
    css_class = ...
    link_template = ...
    def render_link(self, template_pack=..., **kwargs): # -> SafeText:
        """
        Render the link for the tab-pane. It must be called after render so css_class is updated
        with active if needed.
        """
        ...
    


class TabHolder(ContainerHolder):
    """
    TabHolder object. It wraps Tab objects in a container. Requires bootstrap-tab.js::

        TabHolder(
            Tab('form_field_1', 'form_field_2'),
            Tab('form_field_3')
        )
    """
    template = ...
    def render(self, form, form_style, context, template_pack=..., **kwargs): # -> SafeText:
        ...
    


class AccordionGroup(Container):
    """
    Accordion Group (pane) object. It wraps given fields inside an accordion
    tab. It takes accordion tab name as first argument::

        AccordionGroup("group name", "form_field_1", "form_field_2")
    """
    template = ...
    data_parent = ...


class Accordion(ContainerHolder):
    """
    Accordion menu object. It wraps `AccordionGroup` objects in a container::

        Accordion(
            AccordionGroup("group name", "form_field_1", "form_field_2"),
            AccordionGroup("another group name", "form_field")
        )
    """
    template = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def render(self, form, form_style, context, template_pack=..., **kwargs): # -> SafeText:
        ...
    


class Alert(Div):
    """
    `Alert` generates markup in the form of an alert dialog

        Alert(content='<strong>Warning!</strong> Best check yo self, you're not looking too good.')
    """
    template = ...
    css_class = ...
    def __init__(self, content, dismiss=..., block=..., **kwargs) -> None:
        ...
    
    def render(self, form, form_style, context, template_pack=..., **kwargs): # -> SafeText:
        ...
    


class UneditableField(Field):
    """
    Layout object for rendering fields as uneditable in bootstrap

    Example::

        UneditableField('field_name', css_class="input-xlarge")
    """
    template = ...
    def __init__(self, field, *args, **kwargs) -> None:
        ...
    


class InlineField(Field):
    template = ...


class Modal(LayoutObject):
    """
    Boostrap layout object for rendering crispy forms objects inside a bootstrap modal.

    The following attributes can be set:
        - `css_id`: modal's DOM id
        - `css_class`: modal's DOM classes
            - NOTE: "modal" and "fade" are applied by default on the template
        - `title`: text to display in the modal's header
            - NOTE: text will be wrapped in a <h5> tag
        - `title_id`: title's DOM id
        - `title_class`: titles's DOM classes
            - NOTE: "modal-title" is applied by default on the template
        - template
            The default template which this Layout Object will be rendered
            with

    Example::

        Modal(
            'field1',
            Div('field2'),
            css_id="modal-id-ex",
            css_class="modal-class-ex,
            title="This is my modal",
        )
    """
    template = ...
    def __init__(self, *fields, template=..., css_id=..., title=..., title_id=..., css_class=..., title_class=..., **kwargs) -> None:
        ...
    
    def render(self, form, form_style, context, template_pack=..., **kwargs): # -> SafeText:
        ...
    


