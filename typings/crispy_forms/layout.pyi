"""
This type stub file was generated by pyright.
"""

class TemplateNameMixin:
    def get_template_name(self, template_pack):
        ...
    


class LayoutObject(TemplateNameMixin):
    def __getitem__(self, slice): # -> Any:
        ...
    
    def __setitem__(self, slice, value): # -> None:
        ...
    
    def __delitem__(self, slice): # -> None:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __getattr__(self, name): # -> Any:
        """
        This allows us to access self.fields list methods like append or insert, without
        having to declare them one by one
        """
        ...
    
    def get_field_names(self, index=...): # -> Any | list[Any]:
        """
        Returns a list of lists, those lists are named pointers. First parameter
        is the location of the field, second one the name of the field. Example::

            [
                [[0,1,2], 'field_name1'],
                [[0,3], 'field_name2']
            ]
        """
        ...
    
    def get_layout_objects(self, *LayoutClasses, **kwargs): # -> Any | list[Any]:
        """
        Returns a list of lists pointing to layout objects of any type matching
        `LayoutClasses`::

            [
                [[0,1,2], 'div'],
                [[0,3], 'field_name']
            ]

        :param max_level: An integer that indicates max level depth to reach when
        traversing a layout.
        :param greedy: Boolean that indicates whether to be greedy. If set, max_level
        is skipped.
        """
        ...
    
    def get_rendered_fields(self, form, form_style, context, template_pack=..., **kwargs): # -> LiteralString:
        ...
    


class Layout(LayoutObject):
    """
    Form Layout. It is conformed by Layout objects: `Fieldset`, `Row`, `Column`, `MultiField`,
    `HTML`, `ButtonHolder`, `Button`, `Hidden`, `Reset`, `Submit` and fields. Form fields
    have to be strings.
    Layout objects `Fieldset`, `Row`, `Column`, `MultiField` and `ButtonHolder` can hold other
    Layout objects within. Though `ButtonHolder` should only hold `HTML` and BaseInput
    inherited classes: `Button`, `Hidden`, `Reset` and `Submit`.

    Example::

        helper.layout = Layout(
            Fieldset('Company data',
                'is_company'
            ),
            Fieldset(_('Contact details'),
                'email',
                Row('password1', 'password2'),
                'first_name',
                'last_name',
                HTML('<img src="/media/somepicture.jpg"/>'),
                'company'
            ),
            ButtonHolder(
                Submit('Save', 'Save', css_class='button white'),
            ),
        )
    """
    def __init__(self, *fields) -> None:
        ...
    
    def render(self, form, form_style, context, template_pack=..., **kwargs): # -> LiteralString:
        ...
    


class ButtonHolder(LayoutObject):
    """
    Layout object. It wraps fields in a <div class="buttonHolder">

    This is where you should put Layout objects that render to form buttons like Submit.
    It should only hold `HTML` and `BaseInput` inherited objects.

    Example::

        ButtonHolder(
            HTML(<span style="display: hidden;">Information Saved</span>),
            Submit('Save', 'Save')
        )
    """
    template = ...
    def __init__(self, *fields, **kwargs) -> None:
        ...
    
    def render(self, form, form_style, context, template_pack=..., **kwargs): # -> SafeText:
        ...
    


class BaseInput(TemplateNameMixin):
    """
    A base class to reduce the amount of code in the Input classes.
    """
    template = ...
    def __init__(self, name, value, **kwargs) -> None:
        ...
    
    def render(self, form, form_style, context, template_pack=..., **kwargs): # -> SafeText:
        """
        Renders an `<input />` if container is used as a Layout object.
        Input button value can be a variable in context.
        """
        ...
    


class Submit(BaseInput):
    """
    Used to create a Submit button descriptor for the {% crispy %} template tag::

        submit = Submit('Search the Site', 'search this site')

    .. note:: The first argument is also slugified and turned into the id for the submit button.
    """
    input_type = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Button(BaseInput):
    """
    Used to create a Submit input descriptor for the {% crispy %} template tag::

        button = Button('Button 1', 'Press Me!')

    .. note:: The first argument is also slugified and turned into the id for the button.
    """
    input_type = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Hidden(BaseInput):
    """
    Used to create a Hidden input descriptor for the {% crispy %} template tag.
    """
    input_type = ...
    field_classes = ...


class Reset(BaseInput):
    """
    Used to create a Reset button input descriptor for the {% crispy %} template tag::

        reset = Reset('Reset This Form', 'Revert Me!')

    .. note:: The first argument is also slugified and turned into the id for the reset.
    """
    input_type = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class Fieldset(LayoutObject):
    """
    Layout object. It wraps fields in a <fieldset>

    Example::

        Fieldset("Text for the legend",
            'form_field_1',
            'form_field_2'
        )

    The first parameter is the text for the fieldset legend. This text is context aware,
    so you can do things like::

        Fieldset("Data for {{ user.username }}",
            'form_field_1',
            'form_field_2'
        )
    """
    template = ...
    def __init__(self, legend, *fields, **kwargs) -> None:
        ...
    
    def render(self, form, form_style, context, template_pack=..., **kwargs): # -> SafeText:
        ...
    


class MultiField(LayoutObject):
    """MultiField container. Renders to a MultiField <div>"""
    template = ...
    field_template = ...
    def __init__(self, label, *fields, **kwargs) -> None:
        ...
    
    def render(self, form, form_style, context, template_pack=..., **kwargs): # -> SafeText:
        ...
    


class Div(LayoutObject):
    """
    Layout object. It wraps fields in a <div>

    You can set `css_id` for a DOM id and `css_class` for a DOM class. Example::

        Div('form_field_1', 'form_field_2', css_id='div-example', css_class='divs')
    """
    template = ...
    def __init__(self, *fields, **kwargs) -> None:
        ...
    
    def render(self, form, form_style, context, template_pack=..., **kwargs): # -> SafeText:
        ...
    


class Row(Div):
    """
    Layout object. It wraps fields in a div whose default class is "formRow". Example::

        Row('form_field_1', 'form_field_2', 'form_field_3')
    """
    template = ...


class Column(Div):
    """
    Layout object. It wraps fields in a div so the wrapper can be used as a column. Example::

        Column('form_field_1', 'form_field_2')

    Depending on the template, css class associated to the div is formColumn, row, or nothing. For this last case, you
     must provide css classes. Example::

        Column('form_field_1', 'form_field_2', css_class='col-xs-6',)
    """
    template = ...


class HTML:
    """
    Layout object. It can contain pure HTML and it has access to the whole
    context of the page where the form is being rendered.

    Examples::

        HTML("{% if saved %}Data saved{% endif %}")
        HTML('<input type="hidden" name="{{ step_field }}" value="{{ step0 }}" />')
    """
    def __init__(self, html) -> None:
        ...
    
    def render(self, form, form_style, context, template_pack=..., **kwargs): # -> SafeText:
        ...
    


class Field(LayoutObject):
    """
    Layout object, It contains one field name, and you can add attributes to it easily.
    For setting class attributes, you need to use `css_class`, as `class` is a Python keyword.

    Example::

        Field('field_name', style="color: #333;", css_class="whatever", id="field_name")
    """
    template = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def render(self, form, form_style, context, template_pack=..., extra_context=..., **kwargs): # -> LiteralString:
        ...
    


class MultiWidgetField(Field):
    """
    Layout object. For fields with :class:`~django.forms.MultiWidget` as `widget`, you can pass
    additional attributes to each widget.

    Example::

        MultiWidgetField(
            'multiwidget_field_name',
            attrs=(
                {'style': 'width: 30px;'},
                {'class': 'second_widget_class'}
            ),
        )

    .. note:: To override widget's css class use ``class`` not ``css_class``.
    """
    def __init__(self, *args, **kwargs) -> None:
        ...
    


